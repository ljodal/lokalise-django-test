name: Translations

on: 
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
    paths:
      - '**.po'

env:
  PYTHON_VERSION: "3.10"
  POETRY_VERSION: "1.1.12"
  POETRY_HOME: "~/.poetry"

concurrency:
  group: translations-${{ github.event.pull_request.number }}
  cancel-in-progress: false # Let previous job complete

jobs:

  # Upload translations to Lokalise if the PR has the "needs translations"
  # label. This label is used as the signal from developers that the PR is
  # ready for translations.
  upload-to-lokalise:
    name: Upload translations
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'needs translations')
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch base commit
        run: git fetch --depth=1 origin "${{ github.event.pull_request.base.sha }}"
      - name: Setup project
        uses: ./.github/actions/setup-project
      - name: Upload translations
        run: |
          ./bin/translations upload project/locale \
            --base-commit "${{ github.event.pull_request.base.sha }}" \
            --lokalise-api-token "${{ secrets.LOKALISE_API_TOKEN }}"  \
            --lokalise-project-id "${{ secrets.LOKALISE_PROJECT_ID }}"  \
            --lokalise-tag "user:${{ github.event.pull_request.user.login }}" \
            --lokalise-tag "pr:${{ github.event.pull_request.number }}"
      - name: Comment on PR
        uses: actions/github-script@v5
        with:
          script: |
            const markerComment = "<!-- translations uploaded to lokalise -->";

            const issue_number = context.payload.pull_request.number;
            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
            });
            const comment = comments.find(comment => comment.body.includes(markerComment));
            const runLink = `${context.serverUrl}/${context.payload.repository.full_name}/actions/runs/${context.runId}`;

            const commentText = `
            Your translations have been uploaded to Lokalise. We will notify you when the translations are ready.

            <i>This comment was posted by <a href="${runLink}">this workflow</a>.</i>

            ${markerComment}
            `;

            if (comment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
                body: commentText,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
                body: commentText,
              });
            }

  # Download translations from Lokalise when the "needs translations" label is
  # removed. This is only run once, when the label is removed, because we don't
  # want to accidentally override developers work-in-progress.
  download-from-lokalise:
    name: Download translations
    runs-on: ubuntu-latest
    # Only run when the "needs translations" label is removed
    if: ${{ github.event.action == 'unlabeled' && github.event.label.name == 'needs translations' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup project
        uses: ./.github/actions/setup-project
      - name: Download translations
        run: |
          ./bin/translations download --output project/locale . \
            --lokalise-api-token "${{ secrets.LOKALISE_API_TOKEN }}"  \
            --lokalise-project-id "${{ secrets.LOKALISE_PROJECT_ID }}"
      - name: Check for changes
        id: check
        run: |
          git diff
          if [[ `git status --porcelain --untraced-files=no` ]]; then
            echo "::set-output name=has_changes::false"
          else
            echo "::set-output name=has_changes::true"
          fi
      - name: Configure git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
      - name: Commit changes (if any)
        if: steps.check.outputs.run_job == 'true'
        run: |
          git add -u
          git commit -m "Add translations from GitHub"
          git push

  # Comment on the PR if it contains changes to .po files. The comment is there
  # to tell developers how the process is to get translations ready.
  comment:
    name: Comment on PR
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'needs translations') }}
    steps:
      - name: Comment on PR
        uses: actions/github-script@v5
        with:
          script: |
            const uploadedMarkerComment = "<!-- translations uploaded to lokalise -->";
            const markerComment = "<!-- how to upload to lokalise -->";

            const issue_number = context.payload.pull_request.number;
            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
            });

            // Only comment if we haven't already done so
            if (
              comments.some(comment => comment.body.includes(markerComment) || comment.body.includes(uploadedMarkerComment))
            ) {
              return;
            }

            const runLink = `${context.serverUrl}/${context.payload.repository.full_name}/actions/runs/${context.runId}`;

            const commentText = `
            Howdy ðŸ‘‹ It looks like this pull request contains changes to translations. When your PR is ready please add the \`needs translations\` label to the PR. The translations will then be automatically uploaded to Lokalise.

            <i>This comment was posted by <a href="${runLink}">this workflow</a>.</i>

            ${markerComment}
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: commentText,
            });
